<?xml version="1.0" encoding="UTF-8"?>
<robot generator="Robot 3.2.2 (Python 3.9.0 on win32)" generated="20210616 15:17:00.240" rpa="false">
<suite id="s1" name="testCase" source="C:\Users\iaris\Documents\Pretest-Engineer\testCase">
<suite id="s1-s1" name="Test" source="C:\Users\iaris\Documents\Pretest-Engineer\testCase\Test.robot">
<test id="s1-s1-t1" name="GET an existing user, notice how the schema gets more accurate">
<kw name="GET" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a GET request to the endpoint.*</doc>
<arguments>
<arg>/users/1</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:01.108" endtime="20210616 15:17:07.810"></status>
</kw>
<kw name="Output Schema" library="REST">
<tags>
<tag>I/O</tag>
</tags>
<doc>*Outputs JSON Schema to terminal or a file.*</doc>
<arguments>
<arg>response body</arg>
</arguments>
<msg timestamp="20210616 15:17:07.812" level="INFO">
{
    "type": "object",
    "properties": {
        "id": {
            "type": "integer",
            "default": 1
        },
        "name": {
            "type": "string",
            "default": "Leanne Graham"
        },
        "username": {
            "type": "string",
            "default": "Bret"
        },
        "email": {
            "type": "string",
            "default": "Sincere@april.biz"
        },
        "address": {
            "type": "object",
            "properties": {
                "street": {
                    "type": "string",
                    "default": "Kulas Light"
                },
                "suite": {
                    "type": "string",
                    "default": "Apt. 556"
                },
                "city": {
                    "type": "string",
                    "default": "Gwenborough"
                },
                "zipcode": {
                    "type": "string",
                    "default": "92998-3874"
                },
                "geo": {
                    "type": "object",
                    "properties": {
                        "lat": {
                            "type": "string",
                            "default": "-37.3159"
                        },
                        "lng": {
                            "type": "string",
                            "default": "81.1496"
                        }
                    },
                    "required": [
                        "lat",
                        "lng"
                    ]
                }
            },
            "required": [
                "city",
                "geo",
                "street",
                "suite",
                "zipcode"
            ]
        },
        "phone": {
            "type": "string",
            "default": "1-770-736-8031 x56442"
        },
        "website": {
            "type": "string",
            "default": "hildegard.org"
        },
        "company": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "default": "Romaguera-Crona"
                },
                "catchPhrase": {
                    "type": "string",
                    "default": "Multi-layered client-server neural-net"
                },
                "bs": {
                    "type": "string",
                    "default": "harness real-time e-markets"
                }
            },
            "required": [
                "bs",
                "catchPhrase",
                "name"
            ]
        }
    },
    "required": [
        "address",
        "company",
        "email",
        "id",
        "name",
        "phone",
        "username",
        "website"
    ]
}</msg>
<status status="PASS" starttime="20210616 15:17:07.811" endtime="20210616 15:17:07.876"></status>
</kw>
<kw name="Object" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON object.*</doc>
<arguments>
<arg>response body</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:07.890" endtime="20210616 15:17:07.899"></status>
</kw>
<kw name="Integer" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON integer.*</doc>
<arguments>
<arg>response body id</arg>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:07.901" endtime="20210616 15:17:07.902"></status>
</kw>
<kw name="String" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON string.*</doc>
<arguments>
<arg>response body name</arg>
<arg>Leanne Graham</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:07.904" endtime="20210616 15:17:07.907"></status>
</kw>
<kw name="Output Schema" library="REST" type="teardown">
<tags>
<tag>I/O</tag>
</tags>
<doc>*Outputs JSON Schema to terminal or a file.*</doc>
<msg timestamp="20210616 15:17:07.910" level="INFO">
{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "GET https://jsonplaceholder.typicode.com/users/1",
    "description": "testCase.Test: GET an existing user, notice how the schema gets more accurate",
    "default": true,
    "examples": [],
    "type": "object",
    "properties": {
        "request": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "null"
                },
                "query": {
                    "type": "object"
                }
            }
        },
        "response": {
            "type": "object",
            "properties": {
                "body": {
                    "type": "object",
                    "properties": {
                        "id": {
                            "type": "integer",
                            "default": 1,
                            "enum": [
                                1
                            ]
                        },
                        "name": {
                            "type": "string",
                            "default": "Leanne Graham",
                            "enum": [
                                "Leanne Graham"
                            ]
                        },
                        "username": {
                            "type": "string",
                            "default": "Bret"
                        },
                        "email": {
                            "type": "string",
                            "default": "Sincere@april.biz"
                        },
                        "address": {
                            "type": "object",
                            "properties": {
                                "street": {
                                    "type": "string",
                                    "default": "Kulas Light"
                                },
                                "suite": {
                                    "type": "string",
                                    "default": "Apt. 556"
                                },
                                "city": {
                                    "type": "string",
                                    "default": "Gwenborough"
                                },
                                "zipcode": {
                                    "type": "string",
                                    "default": "92998-3874"
                                },
                                "geo": {
                                    "type": "object",
                                    "properties": {
                                        "lat": {
                                            "type": "string",
                                            "default": "-37.3159"
                                        },
                                        "lng": {
                                            "type": "string",
                                            "default": "81.1496"
                                        }
                                    },
                                    "required": [
                                        "lat",
                                        "lng"
                                    ]
                                }
                            },
                            "required": [
                                "city",
                                "geo",
                                "street",
                                "suite",
                                "zipcode"
                            ]
                        },
                        "phone": {
                            "type": "string",
                            "default": "1-770-736-8031 x56442"
                        },
                        "website": {
                            "type": "string",
                            "default": "hildegard.org"
                        },
                        "company": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "default": "Romaguera-Crona"
                                },
                                "catchPhrase": {
                                    "type": "string",
                                    "default": "Multi-layered client-server neural-net"
                                },
                                "bs": {
                                    "type": "string",
                                    "default": "harness real-time e-markets"
                                }
                            },
                            "required": [
                                "bs",
                                "catchPhrase",
                                "name"
                            ]
                        }
                    },
                    "required": [
                        "address",
                        "company",
                        "email",
                        "id",
                        "name",
                        "phone",
                        "username",
                        "website"
                    ],
                    "examples": [
                        {
                            "id": 1,
                            "name": "Leanne Graham",
                            "username": "Bret",
                            "email": "Sincere@april.biz",
                            "address": {
                                "street": "Kulas Light",
                                "suite": "Apt. 556",
                                "city": "Gwenborough",
                                "zipcode": "92998-3874",
                                "geo": {
                                    "lat": "-37.3159",
                                    "lng": "81.1496"
                                }
                            },
                            "phone": "1-770-736-8031 x56442",
                            "website": "hildegard.org",
                            "company": {
                                "name": "Romaguera-Crona",
                                "catchPhrase": "Multi-layered client-server neural-net",
                                "bs": "harness real-time e-markets"
                            }
                        }
                    ]
                }
            }
        }
    }
}</msg>
<status status="PASS" starttime="20210616 15:17:07.908" endtime="20210616 15:17:07.960"></status>
</kw>
<status status="PASS" starttime="20210616 15:17:01.107" endtime="20210616 15:17:07.961" critical="yes"></status>
</test>
<test id="s1-s1-t2" name="GET existing users, use JSONPath for very short but powerful queries">
<kw name="GET" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a GET request to the endpoint.*</doc>
<arguments>
<arg>/users?_limit=5</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:07.970" endtime="20210616 15:17:09.002"></status>
</kw>
<kw name="Array" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON array.*</doc>
<arguments>
<arg>response body</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:09.003" endtime="20210616 15:17:09.009"></status>
</kw>
<kw name="Integer" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON integer.*</doc>
<arguments>
<arg>$[0].id</arg>
<arg>1</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:09.010" endtime="20210616 15:17:09.104"></status>
</kw>
<kw name="String" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON string.*</doc>
<arguments>
<arg>$[0]..lat</arg>
<arg>-37.3159</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:09.105" endtime="20210616 15:17:09.165"></status>
</kw>
<kw name="Integer" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON integer.*</doc>
<arguments>
<arg>$..id</arg>
<arg>maximum=5</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:09.166" endtime="20210616 15:17:09.233"></status>
</kw>
<kw name="Output" library="REST" type="teardown">
<tags>
<tag>I/O</tag>
</tags>
<doc>*Outputs JSON to terminal or a file.*</doc>
<arguments>
<arg>$[*].email</arg>
</arguments>
<msg timestamp="20210616 15:17:09.292" level="INFO">
[
    "Sincere@april.biz",
    "Shanna@melissa.tv",
    "Nathan@yesenia.net",
    "Julianne.OConner@kory.org",
    "Lucio_Hettinger@annie.ca"
]</msg>
<status status="PASS" starttime="20210616 15:17:09.234" endtime="20210616 15:17:09.296"></status>
</kw>
<status status="PASS" starttime="20210616 15:17:07.968" endtime="20210616 15:17:09.297" critical="yes"></status>
</test>
<test id="s1-s1-t3" name="POST with valid params to create a new user, can be output to a file">
<kw name="POST" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a POST request to the endpoint.*</doc>
<arguments>
<arg>/users</arg>
<arg>${json}</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:09.302" endtime="20210616 15:17:10.429"></status>
</kw>
<kw name="Integer" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON integer.*</doc>
<arguments>
<arg>response status</arg>
<arg>201</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:10.430" endtime="20210616 15:17:10.431"></status>
</kw>
<kw name="Output" library="REST" type="teardown">
<tags>
<tag>I/O</tag>
</tags>
<doc>*Outputs JSON to terminal or a file.*</doc>
<arguments>
<arg>response body</arg>
<arg>${OUTPUTDIR}/new_user.demo.json</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:10.432" endtime="20210616 15:17:10.434"></status>
</kw>
<status status="PASS" starttime="20210616 15:17:09.301" endtime="20210616 15:17:10.434" critical="yes"></status>
</test>
<test id="s1-s1-t4" name="PUT with valid params to update the existing user, values matter here">
<kw name="PUT" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a PUT request to the endpoint.*</doc>
<arguments>
<arg>/users/2</arg>
<arg>{ "isCoding": true }</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:10.438" endtime="20210616 15:17:11.570"></status>
</kw>
<kw name="Boolean" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON boolean.*</doc>
<arguments>
<arg>response body isCoding</arg>
<arg>true</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:11.571" endtime="20210616 15:17:11.572"></status>
</kw>
<kw name="PUT" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a PUT request to the endpoint.*</doc>
<arguments>
<arg>/users/2</arg>
<arg>{ "sleep": null }</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:11.573" endtime="20210616 15:17:12.640"></status>
</kw>
<kw name="Null" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON null.*</doc>
<arguments>
<arg>response body sleep</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:12.641" endtime="20210616 15:17:12.642"></status>
</kw>
<kw name="PUT" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a PUT request to the endpoint.*</doc>
<arguments>
<arg>/users/2</arg>
<arg>{ "pockets": "", "money": 0.02 }</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:12.643" endtime="20210616 15:17:13.700"></status>
</kw>
<kw name="String" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON string.*</doc>
<arguments>
<arg>response body pockets</arg>
<arg>${EMPTY}</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:13.701" endtime="20210616 15:17:13.702"></status>
</kw>
<kw name="Number" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON number.*</doc>
<arguments>
<arg>response body money</arg>
<arg>0.02</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:13.703" endtime="20210616 15:17:13.703"></status>
</kw>
<kw name="Missing" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field does not exist.*</doc>
<arguments>
<arg>response body moving</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:13.704" endtime="20210616 15:17:13.705"></status>
</kw>
<status status="PASS" starttime="20210616 15:17:10.436" endtime="20210616 15:17:13.705" critical="yes"></status>
</test>
<test id="s1-s1-t5" name="PATCH with valid params, reusing response properties as a new payload">
<kw name="GET" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a GET request to the endpoint.*</doc>
<arguments>
<arg>/users/3</arg>
</arguments>
<assign>
<var>&amp;{res}</var>
</assign>
<msg timestamp="20210616 15:17:14.389" level="INFO">&amp;{res} = { seconds=0.6727000000000001 | status=200 | body={'id': 3, 'name': 'Clementine Bauch', 'username': 'Samantha', 'email': 'Nathan@yesenia.net', 'address': {'street': 'Douglas Extension', 'suite': 'Suite...</msg>
<status status="PASS" starttime="20210616 15:17:13.708" endtime="20210616 15:17:14.389"></status>
</kw>
<kw name="String" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON string.*</doc>
<arguments>
<arg>$.name</arg>
<arg>Clementine Bauch</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:14.390" endtime="20210616 15:17:14.437"></status>
</kw>
<kw name="PATCH" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a PATCH request to the endpoint.*</doc>
<arguments>
<arg>/users/4</arg>
<arg>{ "name": "${res.body['name']}" }</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:14.438" endtime="20210616 15:17:15.564"></status>
</kw>
<kw name="String" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON string.*</doc>
<arguments>
<arg>$.name</arg>
<arg>Clementine Bauch</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:15.565" endtime="20210616 15:17:15.616"></status>
</kw>
<kw name="PATCH" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a PATCH request to the endpoint.*</doc>
<arguments>
<arg>/users/5</arg>
<arg>${dict}</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:15.617" endtime="20210616 15:17:16.716"></status>
</kw>
<kw name="String" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON string.*</doc>
<arguments>
<arg>$.name</arg>
<arg>${dict.name}</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:16.717" endtime="20210616 15:17:16.766"></status>
</kw>
<status status="PASS" starttime="20210616 15:17:13.707" endtime="20210616 15:17:16.767" critical="yes"></status>
</test>
<test id="s1-s1-t6" name="DELETE the existing successfully, save the history of all requests">
<kw name="DELETE" library="REST">
<tags>
<tag>http</tag>
</tags>
<doc>*Sends a DELETE request to the endpoint.*</doc>
<arguments>
<arg>/users/6</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:16.770" endtime="20210616 15:17:17.982"></status>
</kw>
<kw name="Integer" library="REST">
<tags>
<tag>assertions</tag>
</tags>
<doc>*Asserts the field as JSON integer.*</doc>
<arguments>
<arg>response status</arg>
<arg>200</arg>
<arg>202</arg>
<arg>204</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:17.983" endtime="20210616 15:17:17.984"></status>
</kw>
<kw name="REST Instances" library="REST">
<tags>
<tag>I/O</tag>
</tags>
<doc>*Writes the instances as JSON to a file.*</doc>
<arguments>
<arg>${OUTPUTDIR}/all.demo.json</arg>
</arguments>
<status status="PASS" starttime="20210616 15:17:17.985" endtime="20210616 15:17:17.997"></status>
</kw>
<status status="PASS" starttime="20210616 15:17:16.769" endtime="20210616 15:17:17.997" critical="yes"></status>
</test>
<doc>Test data can be read from variables and files.
Both JSON and Python type systems are supported for inputs.
Every request creates a so-called instance. Can be `Output`.
Most keywords are effective only for the last instance.
Initial schemas are autogenerated for request and response.
You can make them more detailed by using assertion keywords.
The assertion keywords correspond to the JSON types.
They take in either path to the property or a JSONPath query.
Using (enum) values in tests optional. Only type is required.
All the JSON Schema validation keywords are also supported.
Thus, there is no need to write any own validation logic.
Not a long path from schemas to full Swagger/OpenAPI specs.
The persistence of the created instances is the test suite.
Use keyword `Rest instances` to output the created instances.</doc>
<status status="PASS" starttime="20210616 15:17:00.300" endtime="20210616 15:17:18.000"></status>
</suite>
<status status="PASS" starttime="20210616 15:17:00.244" endtime="20210616 15:17:18.010"></status>
</suite>
<statistics>
<total>
<stat pass="6" fail="0">Critical Tests</stat>
<stat pass="6" fail="0">All Tests</stat>
</total>
<tag>
</tag>
<suite>
<stat pass="6" fail="0" id="s1" name="testCase">testCase</stat>
<stat pass="6" fail="0" id="s1-s1" name="Test">testCase.Test</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
